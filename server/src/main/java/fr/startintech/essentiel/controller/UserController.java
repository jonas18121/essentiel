package fr.startintech.essentiel.controller;

import fr.startintech.essentiel.data.model.User;
import fr.startintech.essentiel.data.repository.UserRepository;
import fr.startintech.essentiel.exeption.IdMismatchException;
import fr.startintech.essentiel.exeption.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/api/user") // This means URL's start with /api (after Application path)
public class UserController {
    @Autowired  // This means to get the bean called UserRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository repository;

    /**
     * Get all users
     * @return a list of Users
     */
    @GetMapping // Map ONLY GET Requests
    public List<User> findAll() {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }

    /**
     * Get user by name
     * @param userEmail user's email
     * @return called user
     */
    @GetMapping("/email/{userEmail}") // Map ONLY GET Requests
    public User findByName(@PathVariable String userEmail) {
        // @PathVariable means it is a parameter from path
        return repository.findByEmail(userEmail);
    }

    /**
     * Get User by id
     * @param id user's id
     * @return called user
     * @throws NotFoundException
     */
    @GetMapping("/{id}") // Map ONLY GET Requests
    public User findOne(@PathVariable Long id) throws NotFoundException {
        return repository.findById(id)
                .orElseThrow(NotFoundException::new);
    }

    /**
     * Create a new user
     * @param user user to create
     * @return created user
     */
    @PostMapping // Map ONLY POST Requests
    @ResponseStatus(HttpStatus.CREATED)
    public User create(@RequestBody User user) {
        return repository.save(user);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) throws NotFoundException {
        repository.findById(id)
                .orElseThrow(NotFoundException::new);
        repository.deleteById(id);
    }

    /**
     * Delete all users
     */
    @DeleteMapping // Map ONLY DELETE Requests
    public void delete() {
        repository.deleteAll();
    }

    /**
     * Update sent user
     * @param user user to update
     * @param id User id
     * @return saved user
     * @throws IdMismatchException
     * @throws NotFoundException
     */
    @PutMapping("/{id}") // Map ONLY PUT Requests
    public User updateUser(@RequestBody User user, @PathVariable Long id) throws IdMismatchException, NotFoundException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (user.getId() != id) {
            throw new IdMismatchException();
        }
        repository.findById(id)
                .orElseThrow(NotFoundException::new);
        return repository.save(user);
    }
}

